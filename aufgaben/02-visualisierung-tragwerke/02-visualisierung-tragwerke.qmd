---
title: Aufgabenblatt 2
subtitle: Erzeugung und Darstellung von Stabtragwerken
---

Wir halten zunächst fest, welche Informationen zur Beschreibung eines Stabtragwerks notwendig sind. Hierzu betrachten wir das dargestellte einfache System.

![](bilder/beispiel.svg){fig-align="center" width="40%"}

Um dieses System zu beschreiben benötigen wir:

- Koordinaten der Knotenpunkte.
- Die Knotennummern der einzelnen Stäbe.
- Auflagerbedingungen in horizontaler und vertikaler Richtung.
- Auf die Knoten einwirkenden Kräfte.
- Dehnsteifigkeit $EA$.

Zunächst verwenden wir für alle Stäbe eine einheitliche Dehnsteifigkeit, später lässt sich das einfach erweitern.

Das Tragwerk erzeugen wir in einer Funktion, die in einer eigenen Datei abgelegt werden soll, das erleichtert später die Arbeit. Unten der Code, den Sie bitte kopieren. In der Funktion wird eine Variable `s` verwendet, in der die verschiedenen Eigenschaften des Systems ($EA$, Knoten, Stäbe etc.) abgelegt werden. Der Zugriff auf die Eigenschaften erfolgt dann mit dem Punkt-Operator, also greift man zum Beispiel mit $s.nodes$ auf die Knoten des Systems zu.

::: {.panel-tabset}
## Julia - structures.jl

``` {.julia}
using DotMaps

function simple_example()    
    s = DotMap()
    s.EA = 60000    
    s.nodes = [
        0 4 0
        0 0 3
    ]    
    s.elements = [
        1 1 3
        2 3 2
    ]
    s.forces = zeros(2, 3)
    s.forces[1, 3] = 120
    s.supports = falses(2, 3)
    s.supports[:, 1] .= true
    s.supports[2, 2] = true
    return s
end


function girder(l=40, h1=2, h2=7, nn=11)
    s = DotMap()

    # Stiffness
    s.EA = 60000

    # Nodes
    ns = (nn - 1) ÷ 2
    x = range(-l / 2, l / 2, nn)
    y1 = zeros(nn)
    y2 = h2 .- (h2 - h1) / (l / 2)^2 * x .^ 2
    s.nodes = stack([vcat(x, x), vcat(y1, y2)], dims=1)

    # Elements
    ne1 = []
    ne2 = []
    append!(ne1, 1:nn-1)
    append!(ne2, 2:nn)
    append!(ne1, nn+1:2nn-1)
    append!(ne2, nn+2:2nn)
    append!(ne1, 1:nn)
    append!(ne2, nn+1:2nn)
    append!(ne1, nn+1:nn+ns)
    append!(ne2, 2:ns+1)
    append!(ne1, ns+1:nn-1)
    append!(ne2, nn+ns+2:2nn)
    s.elements = stack([ne1, ne2], dims=1)

    # Supports
    s.supports = falses(2, 2 * nn)
    s.supports[:, 1] .= true
    s.supports[2, nn] = true

    # Forces
    s.forces = zeros(2, 2 * nn)
    s.forces[2, 2:nn-1] .= -10

    return s
end
```

## Python - structures.py

``` {.python}
import numpy as np
from objdict import *

def simple_example():
    s = ObjDict()
    s.EA = 60000
    s.nodes = np.array(
        [[0, 4, 0],
        [0, 0, 3]])
    s.elements = np.array(
        [[0, 0, 2],
        [1, 2, 1]])
    s.forces = np.zeros((2, 3))
    s.forces[0, 2] = 120
    s.supports = np.full((2, 3), False)
    s.supports[:, 0] = True
    s.supports[1, 1] = True
    return s


def girder(l=40, h1=2, h2=7, nn=11):
    s = ObjDict()
    
    # Anzahl Knoten je Seite (ohne Mitte)
    ns = int((nn - 1) / 2)

    # E-Modul
    s.EA = 60000

    # Knoten
    x = np.linspace(-l/2, l/2, nn)
    y1 = 0 * x
    y2 = h2 - (h2 - h1) / (l/2)**2 * x**2
    x = np.concatenate([x, x])
    y = np.concatenate([y1, y2])
    s.nodes = np.array([x, y])

    # Elemente
    ne1 = []
    ne2 = []
    ne1 += range(0, nn-1)
    ne2 += range(1, nn)
    ne1 += range(nn, 2*nn-1)
    ne2 += range(nn+1, 2*nn)
    ne1 += range(0, nn)
    ne2 += range(nn, 2*nn)
    ne1 += range(nn, nn+ns)
    ne2 += range(1, 1+ns)
    ne1 += range(ns, nn-1)
    ne2 += range(nn+ns+1, 2*nn)
    s.elements = np.array([ne1, ne2])

    # Kräfte
    s.forces = np.zeros([2, 2*nn])
    s.forces[1,1:nn-1] = -10

    # Auflager
    s.supports = np.full([2, 2*nn], False)
    s.supports[:,0] = True
    s.supports[1,nn-1] = True
    
    return s
```
:::

## Stabtragwerk erzeugen

1. Erzeugen Sie die Datei `structures.(jl|py)` und fügen Sie den Code oben ein.

1. Legen Sie ein Jupyter-Notebook `fachwerke.ipynb` an. Binden Sie die Datei `structures.(jl|py)` ein und erzeugen Sie das Tragwerk.

## Hilfsfunktion füp Größe des Systems

Erstellen Sie eine Function `struct_size(s)` mit der ein Maß für die Abmessunges des Tragwerks ermittelt wird. Sie benötigen das später zum Beispiel für das Zeichnen der Auflager. Eine gute Möglichkeit besteht darin, das geometrische Mittel von Breite und Höhe des Systems zu verwenden, also

$$
    s = \sqrt{(x_{max} - x_{min}) \cdot (y_{max} - y_{min})}.
$$

## Stabtragwerk graphisch darstellen

Zeichnen Sie das Stabtragwerk, zum Beispiel so:

![](bilder/beispiel-matlab.svg){fig-align="center" width="40%"}

Es bietet sich an, den Code zunächst einfach in das Jupyter-Notebook zu schreiben und am Schluss in eine Funktion `draw_system(s)` zu verschieben. Gehen Sie in den folgenden Schritten vor:

1. Knoten
1. Stäbe
1. Kräfte 
1. Auflager

## Anwendungsbeispiel

Erstellen Sie das Modell einer interessanten ebenen Fachwerkstruktur, für die Sie später Verformungen und Schnittgrößen berechnen möchten. Beachten Sie, dass es in mit einer Programmiersprache möglich ist, regelmäßige Tragwerke mit nur wenigen Anweisungen zu erzeugen, selbst wenn diese viele Knoten und Stäbe besitzen.

Hier ein paar Bilder zur Anregung.

::: {layout="[[1,-0.1,1.8], [1]]"}
![](bilder/FWKranAufgabe.png)

![](bilder/L-Polonceaudachstuhl.png)

![](bilder/image002.jpg)
:::

