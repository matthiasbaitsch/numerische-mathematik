---
title: Aufgabenblatt 7
subtitle: Instationäre Wärmeleitung in einer Wand
---

\newcommand{\SI}[2]{#1\,\mathrm{#2}}
\newcommand{\si}[1]{\mathrm{#1}}
\newcommand{\bm}[1]{\mathbf{#1}}
\newcommand{\celsius}{°}
\newcommand{\hour}{h}

## Wärmeleitung

![](bilder/wandaufbau.svg)

Für den oben dargestellten Wandaufbau werden folgende Fragestellungen betrachtet:

a. Stationär: In einem stationären Zustand ändert sich die Temperatur nicht über die Zeit, es gilt also $\dot\theta(x) = 0$. Vorgegeben sind die Temperaturen
   $$
   \theta_a = \SI{-5}{\celsius} \quad \text{und} \quad \theta_i = \SI{20}{\celsius}.     
   $$
   Gesucht ist die Temperaturverteilung $\theta = \theta(x)$. 

a. Instationär: Hier sind die Temperaturen zu
   $$
   \theta_a(t) = (5 - 10 \cdot \cos(\omega t)) \si{\celsius} 
   \quad \text{und} \quad 
   \theta_i = \SI{20}{\celsius} 
   \quad \text{mit} \quad
   \omega = \frac{2\pi}{24 \cdot 60 \cdot 60} \; \si{rad/s}
   $$
   vorgegeben. Gesucht ist die Temperaturverteilung $\theta = \theta(x, t)$ über einen Zeitraum von drei Tagen.

### Referenzlösung mit drei Kontrollvolumen

Um die Vorgehensweise zu verstehen und als Referenzlösung für die allgemeine Programmierung sollen Sie zunächst mit drei Kontrollvolumen rechnen (klar, diese Unterteilung ist viel zu grob). 

1. Formulieren Sie auf dem Papier für eine räumliche Diskretisierung mit drei Kontrollvolumen (für jede Schicht eines) die Differentialgleichung für den instationären Fall. Berechnen Sie $\dot{\bm{\theta}}(t)$ für $\theta_1(0) = \theta_2(0) = \theta_3(0) = 0$ zum Zeitpunkt $t = \SI{0}{h}$. 

1. Stellen Sie in Julia/Python die zugehörige Matrix $\mathbf{A}$ und die Funktion $\mathbf{r}$ (instationärer Fall) auf (mit den Parametern berechnen, nicht aus 1 abschreiben). Vergleichen Sie die Werte mit ihrer Handrechnung aus Schritt 1.

1. Berechnen Sie die stationäre Lösung zu $\mathbf{r}(0)$ und plotten Sie das Ergebnis mit `plot_temp(w, theta)`. Parameter der Funktion sind die Wandschichten `w` und der Temperaturvektor `theta`.

1. Implementieren und testen Sie die Funktion der Differentialgleichung.

1. Lösen Sie das Anfangswertproblem (stationäre Lösung als Anfangswert) über einen Zeitraum von drei Tagen. Plotten Sie die Lösung über die Zeit mit `plot_sol(t, theta)` sowie für $t = \SI{0}{\hour}$, $t = \SI{12}{\hour}$ und  $t = \SI{24}{\hour}$ über den Ort. Verwenden Sie dafür wieder `plot_temp(w, theta)`.

### Lösung mit beliebig feiner Unterteilung

- Implementieren Sie die Funktion `A, r = compute_ar(w, rba, rbi)` mit der Sie die Matrix $\mathbf{A}$ und die Funktion $\mathbf{r}$ erzeugen. 

- Bestimmen für $\mathbf{r}(0)$ die stationäre Lösung $\mathbf{\theta}_0$ und plotten Sie diese mit der bereitgestellten Funktion `plot_temp(w, theta)`.

- Ermitteln sie für einen Zeitraum von 72 Stunden den Temperaturverlauf in der Wand mit $\mathbf{\theta}_0$ als Anfangswert. Verwenden Sie dabei eine Zeitschrittweite von einer Minute. Plotten Sie den Verlauf über die Zeit (`plot_sol`) sowie die Temperaturverteilung in der Wand nach $6, 12, 18$ sowie $24$ Stunden (`plot_temp`).

- Zusatzaufgaben: Erstellen Sie eine Animation des Temperaturverlaufs über die Zeit. 

### Stabilität des Lösungsverfahrens

Bestimmen Sie für Kontrollvolumen der Dicken $\SI{2.5}{cm}$, $\SI{1.25}{cm}$ sowie $\SI{0.625}{cm}$ die maximale Zeitschrittweite (in ganzen Sekunden), für die das Runge-Kutta-Verfahren noch sinnvolle Ergebnisse liefert. Es bietet sich hierfür an, die gesamte Rechnung in einer Funktion `t, theta = solve(hx, ht)` unterzubringen. Dabei ist `hx` die Schichtdicke und `ht` die Zeitschrittweite. Die gesuchte Zeitschrittweite kann durch gezieltes Ausprobieren bestimmt werden.

## Implizites Euler-Verfahren (freiwillig)

Anfangswertprobleme der Form
$$
  \mathbf{y}'(x) = - \mathbf{A} \mathbf{y}(x) + \mathbf{r}(x)
$$
lassen sich vergleichsweise einfach mit dem impliziten Euler-Verfahren lösen.

Aufgaben:

- Leiten Sie die Rechenvorschrift für $\mathbf{y}_{i+1}$ des impliziten Euler-Verfahrens für das Problem oben her. Tipp: Die Matrix $\mathbf{A}$ ist invertierbar!

- Programmieren Sie das implizite Euler-Verfahren in einer Funktion `x, y = euler_mplizit(A, r, I, h, y0)`

- Lösen Sie das Wärmeleitungsproblem der Wand mit dem impliziten Euler-Verfahren. Was ist die maximale Schrittweite mit der Sie eine Lösung erhalten, die nicht allzu stark von der des Runge-Kutta-Verfahrens abweicht?


